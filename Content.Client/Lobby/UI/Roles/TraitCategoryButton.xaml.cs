using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Maths;
using System.Collections.Generic;
using System.Linq;

namespace Content.Client.Lobby.UI.Roles;

[GenerateTypedNameReferences]
public sealed partial class TraitCategoryButton : Control
{
    // Static dictionary to track expanded states by category name
    private static readonly Dictionary<string, bool> ExpandedStates = new();

    public string CategoryName { get; }
    public bool IsExpanded
    {
        get => ExpandedStates.GetValueOrDefault(CategoryName, false);
        private set => ExpandedStates[CategoryName] = value;
    }

    public TraitCategoryButton(string categoryName)
    {
        RobustXamlLoader.Load(this);
        CategoryName = categoryName;

        CategoryButton.Text = categoryName;
        CategoryButton.OnPressed += ToggleExpanded;

        // Apply the saved expanded state when created
        bool expanded = ExpandedStates.GetValueOrDefault(categoryName, false);
        TraitsContainer.Visible = expanded;

        // Always use the OpenBottom style
        CategoryButton.StyleClasses.Remove("OpenBoth");
        CategoryButton.StyleClasses.Add("OpenBottom");
    }

    private void ToggleExpanded(BaseButton.ButtonEventArgs args)
    {
        IsExpanded = !IsExpanded;
        TraitsContainer.Visible = IsExpanded;

        // No need to change style classes as we always use OpenBottom now
    }

    public void AddTrait(Control control)
    {
        TraitsContainer.AddChild(control);
    }

    // Method to set expanded state directly
    public void SetExpanded(bool expanded)
    {
        IsExpanded = expanded;
        TraitsContainer.Visible = expanded;
    }

    // Static method to set all categories to a specific expanded state
    public static void SetAllExpanded(bool expanded)
    {
        foreach (var key in ExpandedStates.Keys.ToList())
        {
            ExpandedStates[key] = expanded;
        }
    }
}
